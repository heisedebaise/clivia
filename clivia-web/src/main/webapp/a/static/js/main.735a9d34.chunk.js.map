{"version":3,"sources":["http.js","request.jsx","upload.jsx","main.jsx","serviceWorker.js","index.js"],"names":["service","uri","body","post","then","json","code","message","success","data","warn","fetch","method","headers","header","JSON","stringify","response","loader","setState","loading","ok","status","statusText","psid","localStorage","getItem","length","Math","random","toString","substring","setItem","Request","request","render","direction","style","width","React","Component","Upload","responseFile","responseBase64","dashed","type","props","url","title","className","columns","dataIndex","key","require","CheckOutlined","CloseOutlined","dataSource","name","meta","upload","description","rowKey","pagination","Main","componentDidMount","document","logo","user","module","children","child","push","model","parameters","replace","list","page","d","show","locale","zhCN","minHeight","Sider","src","alt","onClick","mode","theme","defaultOpenKeys","defaultSelectedKeys","state","item","menu","Date","getFullYear","Header","Content","items","parent","menus","i","SubMenu","map","Item","e","emptyText","image","PRESENTED_IMAGE_SIMPLE","window","location","href","pathname","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.735a9d34.chunk.js","sourcesContent":["import {\n    message\n} from 'antd';\n\nconst root = '';\n\nconst service = (uri, body) => post(uri, body).then(json => {\n    if (json === null) return null;\n\n    if (json.code === 0) {\n        if (json.message)\n            message.success(json.message);\n\n        return json.data;\n    }\n\n    message.warn('[' + json.code + ']' + json.message);\n\n    return null;\n});\n\nconst post = (uri, body) => fetch(root + uri, {\n    method: 'POST',\n    headers: header(),\n    body: JSON.stringify(body)\n}).then(response => {\n    if (post.loader) {\n        post.loader.setState({\n            loading: false\n        });\n    }\n\n    if (response.ok) return response.json();\n\n    message.warn('[' + response.status + ']' + response.statusText);\n\n    return null;\n});\n\nconst header = () => {\n    let header = {\n        'Content-Type': 'application/json'\n    };\n    psid(header, true);\n\n    return header;\n}\n\nconst url = uri => root + uri;\n\nconst psid = (header, loading) => {\n    if (loading && post.loader) {\n        post.loader.setState({\n            loading: true\n        });\n    }\n\n    let psid = localStorage.getItem('photon-session-id');\n    if (!psid) {\n        psid = '';\n        while (psid.length < 64) psid += Math.random().toString(36).substring(2);\n        psid = psid.substring(0, 64);\n        localStorage.setItem('photon-session-id', psid);\n    }\n    header['photon-session-id'] = psid;\n}\n\nconst loader = loader => post.loader = loader;\n\nexport {\n    service,\n    post,\n    url,\n    psid,\n    loader\n};","import React from 'react';\nimport { Space } from 'antd';\n\nclass Request extends React.Component {\n    request = `const post = (url, body) => fetch(url, {\n    method: 'POST',\n    headers: header(),\n    body: JSON.stringify(body)\n}).then(response => {\n    if (response.ok) return response.json();\n\n    message.warn('[' + response.status + ']' + response.statusText);\n\n    return null;\n});\n\nconst header = () => {\n    let header = {\n        'Content-Type': 'application/json'\n    };\n    psid(header, true);\n\n    return header;\n}\n\nconst psid = (header) => {\n    let psid = localStorage.getItem('photon-session-id');\n    if (!psid) {\n        psid = '';\n        while (psid.length < 64) psid += Math.random().toString(36).substring(2);\n        psid = psid.substring(0, 64);\n        localStorage.setItem('photon-session-id', psid);\n    }\n    header['photon-session-id'] = psid;\n}`;\n\n    response = `{\n    \"code\": \"编码，0表示成功，大于0表示失败。\",\n    \"data\": \"数据，code===0时返回。\",\n    \"message\": \"失败信息说明，code>0时返回。\"\n}`;\n\n    render = () => {\n        return (\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n                <div>参考示例</div>\n                <pre>{this.request}</pre>\n                <div>返回结果</div>\n                <pre>{this.response}</pre>\n            </Space>\n        );\n    }\n}\n\nexport default Request;","import React from 'react';\nimport { Space, Alert, Table, Divider } from 'antd';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\n\nclass Upload extends React.Component {\n    responseFile = `{\n    \"path\": \"文件URI地址\",\n    \"fileName\": \"原文件名\",\n    \"fileSize\": \"文件大小\",\n    \"success\": \"true-成功；false-失败\"\n}`;\n\n    responseBase64 = `{\n    \"code\": 0,\n    \"data\": {\n        \"path\": \"文件URI地址\",\n        \"fileName\": \"原文件名\",\n        \"fileSize\": \"文件大小\",\n        \"success\": \"true-成功；false-失败\"\n    }\n}`;\n\n    render = () => (\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <Divider dashed={true}>文件方式上传</Divider>\n            <Alert type=\"info\" message={'接口地址：' + this.props.url + '/photon/ctrl-http/upload'} />\n            {this.header()}\n            <Table title={() => <div className=\"api-title\">参数</div>} columns={[{\n                title: '参数名',\n                dataIndex: 'name',\n                key: 'name',\n            }, {\n                title: '类型',\n                dataIndex: 'type',\n                key: 'type',\n            }, {\n                title: '必须',\n                dataIndex: 'require',\n                key: 'require',\n                render: require => require ? <CheckOutlined /> : <CloseOutlined />\n            }, {\n                title: '说明',\n                dataIndex: 'description',\n                key: 'description',\n            }]} dataSource={[{ name: this.props.meta.upload, type: 'file', require: true, description: '上传文件。' }]} rowKey=\"name\" pagination={false} />\n            <div>返回结果</div>\n            <pre>{this.responseFile}</pre>\n            <Divider dashed={true}>Base64方式上传</Divider>\n            <Alert type=\"info\" message={'接口地址：' + this.props.url + '/photon/ctrl/upload'} />\n            {this.header()}\n            <Table title={() => <div className=\"api-title\">参数</div>} columns={[{\n                title: '参数名',\n                dataIndex: 'name',\n                key: 'name',\n            }, {\n                title: '类型',\n                dataIndex: 'type',\n                key: 'type',\n            }, {\n                title: '必须',\n                dataIndex: 'require',\n                key: 'require',\n                render: require => require ? <CheckOutlined /> : <CloseOutlined />\n            }, {\n                title: '说明',\n                dataIndex: 'description',\n                key: 'description',\n            }]} dataSource={[{ name: 'name', type: 'string', require: true, description: '固定为：' + this.props.meta.upload + '。' },\n            { name: 'contentType', type: 'string', require: true, description: '文件格式，如：image/jpeg。' },\n            { name: 'fileName', type: 'string', require: true, description: '原文件名。' },\n            { name: 'base64', type: 'string', require: true, description: 'BASE64编码后的文件内容，不包含Content-Type。' }]} rowKey=\"name\" pagination={false} />\n            <div>返回结果</div>\n            <pre>{this.responseBase64}</pre>\n        </Space>\n    );\n\n    header = () => (\n        <Table title={() => <div className=\"api-title\">头信息</div>} columns={[{\n            title: '头名称',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: '类型',\n            dataIndex: 'type',\n            key: 'type',\n        }, {\n            title: '必须',\n            dataIndex: 'require',\n            key: 'require',\n            render: require => require ? <CheckOutlined /> : <CloseOutlined />\n        }, {\n            title: '说明',\n            dataIndex: 'description',\n            key: 'description',\n        }]} dataSource={this.props.meta.headers} rowKey=\"name\" pagination={false} />\n    );\n}\n\nexport default Upload;","import React from 'react';\nimport { ConfigProvider, Layout, Menu, Space, Alert, Table, Empty } from 'antd';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport { service, url } from './http';\nimport Request from './request';\nimport Upload from './upload';\nimport './main.css';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            logo: '',\n            user: {},\n            data: [],\n            item: {}\n        };\n        this.map = {};\n        this.url = window.location.href;\n        this.url = this.url.substring(0, this.url.length - window.location.pathname.length);\n    }\n\n    componentDidMount = () => {\n        service('/keyvalue/object', { key: 'setting.global.' }).then(data => {\n            if (data === null) return;\n\n            document.title = data['setting.global.console.title'] || 'Clivia API';\n            this.setState({ logo: data['setting.global.console.logo'] });\n        });\n        service('/user/sign').then(data => this.setState({ user: data }));\n        service('/api/get').then(data => {\n            if (data === null) return;\n\n            for (let module of data) {\n                for (let child of module.children) {\n                    if (child.psid) {\n                        if (!child.headers) child.headers = [];\n                        child.headers.push({\n                            name: 'photon-session-id',\n                            type: 'string',\n                            require: true,\n                            description: '用户SESSION ID值。'\n                        });\n                    }\n                    if (module.model) {\n                        if (child.response === 'model')\n                            child.response = module.model;\n                        else if (child.response === 'pagination') {\n                            if (!child.parameters) child.parameters = [];\n                            child.parameters.push({ name: 'pageSize', type: 'int', description: '每页显示记录数，默认：20。' });\n                            child.parameters.push({ name: 'pageNum', type: 'int', description: '当前显示页数。' });\n                            child.response = `{\n    \"count\":\"记录总数。\",\n    \"size\":\"每页最大显示记录数。\",\n    \"number\":\"当前显示页数。\",\n    \"page\":\"总页数。\",\n    \"list\":[\n        `+ module.model.replace(/\\n {4}/g, '\\n            ').replace('\\n}', '\\n        }') + `\n    ]\n}`;\n                        }\n                    }\n                }\n            }\n            let list = [{\n                name: '通用',\n                children: [{\n                    name: 'HTTP请求',\n                    page: 'request'\n                }, {\n                    name: '参数签名',\n                    page: 'sign'\n                }]\n            }];\n            for (let d of data)\n                list.push(d);\n            this.setState({ data: list }, () => this.show({ key: '0-0-0' }));\n        });\n    }\n\n    render = () => (\n        <ConfigProvider locale={zhCN}>\n            <Layout style={{ minHeight: '100vh' }}>\n                <Layout.Sider>\n                    <div className=\"api-logo\">{this.props.logo ? [<img key=\"img\" src={url(this.props.logo)} alt=\"\" />, <div key=\"div\"></div>] : null}</div>\n                    <div className=\"api-menu\"><Menu onClick={this.show} mode=\"inline\" theme=\"dark\" defaultOpenKeys={['0-0']} defaultSelectedKeys={[this.state.item.uri ? '0-0' : '0-0-0']}>{this.menu(this.state.data, '0')}</Menu></div>\n                    <div className=\"api-copyright\">clivia-api &copy; {new Date().getFullYear()}</div>\n                </Layout.Sider>\n                <Layout>\n                    <Layout.Header className=\"api-header\">\n                    </Layout.Header>\n                    <Layout.Content>\n                        <div className=\"api-body\">{this.body()}</div>\n                    </Layout.Content>\n                </Layout>\n            </Layout>\n        </ConfigProvider>\n    );\n\n    menu = (items, parent) => {\n        let menus = [];\n        if (items.length === 0) return menus;\n\n        for (let i = 0; i < items.length; i++) {\n            let key = parent + '-' + i;\n            let item = items[i];\n            if (item.children)\n                menus.push(<Menu.SubMenu key={key} title={<span>{item.name}</span>} >{this.menu(item.children, key)}</Menu.SubMenu>);\n            else {\n                this.map[key] = item;\n                menus.push(<Menu.Item key={key}>{item.name}</Menu.Item>);\n            }\n        }\n\n        return menus;\n    };\n\n    show = e => {\n        this.setState({ item: this.map[e.key] });\n    }\n\n    body = () => {\n        if (this.state.item.page) {\n            switch (this.state.item.page) {\n                case 'request':\n                    return <Request />;\n                case 'upload':\n                    return <Upload url={this.url} meta={this.state.item} />;\n                default:\n                    return <div />;\n            }\n        }\n\n        return (\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n                <Alert type=\"info\" message={'接口地址：' + this.url + this.state.item.uri} />\n                <Table title={() => <div className=\"api-title\">头信息</div>} columns={[{\n                    title: '头名称',\n                    dataIndex: 'name',\n                    key: 'name',\n                }, {\n                    title: '类型',\n                    dataIndex: 'type',\n                    key: 'type',\n                }, {\n                    title: '必须',\n                    dataIndex: 'require',\n                    key: 'require',\n                    render: require => require ? <CheckOutlined /> : <CloseOutlined />\n                }, {\n                    title: '说明',\n                    dataIndex: 'description',\n                    key: 'description',\n                }]} dataSource={this.state.item.headers} rowKey=\"name\" pagination={false} locale={{ emptyText: <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description='无需头信息' /> }} />\n                <Table title={() => <div className=\"api-title\">参数</div>} columns={[{\n                    title: '参数名',\n                    dataIndex: 'name',\n                    key: 'name',\n                }, {\n                    title: '类型',\n                    dataIndex: 'type',\n                    key: 'type',\n                }, {\n                    title: '必须',\n                    dataIndex: 'require',\n                    key: 'require',\n                    render: require => require ? <CheckOutlined /> : <CloseOutlined />\n                }, {\n                    title: '说明',\n                    dataIndex: 'description',\n                    key: 'description',\n                }]} dataSource={this.state.item.parameters} rowKey=\"name\" pagination={false} locale={{ emptyText: <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description='无需参数' /> }} />\n                <div className=\"api-response-title\">返回</div>\n                <pre>{this.state.item.response}</pre>\n            </Space>\n        );\n    }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}